// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// isSorted
bool isSorted(const DataFrame& dataFrame, const std::vector<std::string>& indexes, const std::vector<bool>& ascending);
RcppExport SEXP _Andromeda_isSorted(SEXP dataFrameSEXP, SEXP indexesSEXP, SEXP ascendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame& >::type dataFrame(dataFrameSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type indexes(indexesSEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type ascending(ascendingSEXP);
    rcpp_result_gen = Rcpp::wrap(isSorted(dataFrame, indexes, ascending));
    return rcpp_result_gen;
END_RCPP
}
// isSortedVectorList
bool isSortedVectorList(const List& vectorList, const std::vector<bool>& ascending);
RcppExport SEXP _Andromeda_isSortedVectorList(SEXP vectorListSEXP, SEXP ascendingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type vectorList(vectorListSEXP);
    Rcpp::traits::input_parameter< const std::vector<bool>& >::type ascending(ascendingSEXP);
    rcpp_result_gen = Rcpp::wrap(isSortedVectorList(vectorList, ascending));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Andromeda_isSorted", (DL_FUNC) &_Andromeda_isSorted, 3},
    {"_Andromeda_isSortedVectorList", (DL_FUNC) &_Andromeda_isSortedVectorList, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_Andromeda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
